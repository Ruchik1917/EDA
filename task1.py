# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E3-6BM13PQBENRsTmUk0jAGP0skBIfCW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/student_data.csv')

df.shape

df.head(10)

# To find null if any null value exist
df.isnull().sum()

# to find data type of each attribute.
df.info()

df.describe()

correlation_matrix = df.corr()

plt.figure(figsize=(5, 5))
sns.heatmap(correlation_matrix, annot=True, cmap='viridis', center=0)

#kernal density plot of target variable
sns.set(style="whitegrid")
sns.kdeplot(df['Performance'],shade=True)
plt.xlabel("Performance")
plt.ylabel("Density")
plt.title("KDE plot for target variable.")
plt.show

skewness = df['Performance'].skew()
skewness

kurtosis = df['Performance'].kurtosis()
kurtosis

sns.scatterplot(x=df['Previous Scores'],y=df['Performance'])
plt.show()

sns.scatterplot(x=df['Hours Studied'],y=df['Performance'])
plt.show()

sns.boxplot(df['Hours Studied'])

#plt.xlabel('Hours Studied')

sns.boxplot(df['Sample Question Papers Practiced'])

#plt.xlabel('Sample Question Papers Practiced')

#plt.boxplot(df['Previous Scores'])
#plt.xlabel('Previous Scores')
sns.boxplot(df['Previous Scores'])

sns.boxplot(df['Duration of Sleep'])

sns.boxplot(df['Performance'])

df_sleep=df.groupby(['Duration of Sleep', 'Extracurricular Activities']).size().unstack(fill_value=0)
fig, ax = plt.subplots(figsize=(5, 5))
df_sleep.plot(kind='bar', stacked=True, ax=ax)

plt.xlabel('Duration of Sleep')
plt.ylabel('Count')
plt.title('Distribution of by Duration of Sleep by Extracurricular Activities')
plt.xticks(rotation=0)
plt.legend(title='Extracurricular Activities')

df_score=df.groupby(['Previous Scores', 'Extracurricular Activities']).size().unstack(fill_value=0)
fig, ax = plt.subplots(figsize=(14, 4))
df_score.plot(kind='bar', stacked=True, ax=ax)

plt.xlabel('Previous Scores')
plt.ylabel('Count')
plt.title('Distribution of Previous Scores by Extracurricular Activities')
plt.xticks(rotation=0)
plt.legend(title='Extracurricular Activities')

df_hours=df.groupby(['Hours Studied', 'Extracurricular Activities']).size().unstack(fill_value=0)
fig, ax = plt.subplots(figsize=(5, 5))
df_hours.plot(kind='bar', stacked=True, ax=ax)

plt.xlabel('Hours Studied')
plt.ylabel('Count')
plt.title('Distribution of Hours Studied by Extracurricular Activities')
plt.xticks(rotation=0)
plt.legend(title='Extracurricular Activities')

df_question=df.groupby(['Sample Question Papers Practiced', 'Extracurricular Activities']).size().unstack(fill_value=0)
fig, ax = plt.subplots(figsize=(5, 5))
df_question.plot(kind='bar', stacked=True, ax=ax)

plt.xlabel('Sample Question Papers Practiced')
plt.ylabel('Count')
plt.title('Distribution of Sample Question Papers Practiced by Extracurricular Activities')
plt.xticks(rotation=0)
plt.legend(title='Extracurricular Activities')

sleep_count = df['Duration of Sleep'].value_counts()
plt.figure(figsize=(4, 4))
plt.pie(sleep_count, labels=sleep_count.index, autopct='%1.1f%%', startangle=140)
plt.title('Pie Chart for duration of Sleep')
plt.axis('equal')

plt.show()

studyhrs_count = df['Hours Studied'].value_counts()
plt.figure(figsize=(4, 4))
plt.pie(studyhrs_count, labels=studyhrs_count.index, autopct='%1.1f%%', startangle=140)
plt.title('Pie Chart for Study Hours')
plt.axis('equal')

plt.show()

extra_count = df['Extracurricular Activities'].value_counts()
plt.figure(figsize=(4, 4))
plt.pie(extra_count, labels=extra_count.index, autopct='%1.1f%%', startangle=140)
plt.title('Pie Chart for Extracirricular Activities')
plt.axis('equal')

plt.show()

"""# Spliting Data Into Train and Test"""

catvar=['Extracurricular Activities']
data=pd.get_dummies(df, columns=catvar, drop_first=False)

Attributes = data[['Hours Studied','Previous Scores','Extracurricular Activities_No','Extracurricular Activities_Yes','Duration of Sleep','Sample Question Papers Practiced']]
Target = data['Performance']

Attributes_train, Attributes_test, Target_train, Target_test = train_test_split(Attributes,Target, test_size=0.2, train_size=0.8, random_state=None, shuffle=True, stratify=None)

Target_train.info()

"""# Python code for Linear Regression"""

X=Attributes_train[['Hours Studied','Previous Scores','Extracurricular Activities_No','Extracurricular Activities_Yes','Duration of Sleep','Sample Question Papers Practiced']].values
Y=Target_train.values

len(X)

learning_rate = 0.0001
max_iterations = 10000
t=0
Loss=[]
# to count number of columns or attributes
Total_attributes = X.shape[1]

# to initialise theta i to zeros
theta_i = np.zeros(Total_attributes + 1)
theta_j=theta_i[1:]
theta_not=theta_i[0]

for t in range(max_iterations):
    h_theta = np.dot(X,theta_j) + theta_not #predicted
    J_theta=(np.mean((h_theta- Y) ** 2))/2   #Loss
    Loss.append(J_theta)

    deviation = h_theta - Y

    diff_theta_j= np.dot(X.T, deviation) / len(Y)
    diff_theta_not= np.mean(deviation)

    theta_j -= learning_rate * diff_theta_j
    theta_not -= learning_rate * diff_theta_not

 # parameters theta _i

print("theta :", theta_j)
print("Intercept :", theta_not)

Y_predicted= np.dot(X,theta_j)+theta_not
#print(y_predicted)

print(Y[10], Y_predicted[10])

"""Scatter Plot"""

plt.scatter(Y, h_theta)

plt.plot(Y, h_theta, color='red', label='Linear Regression Line')

"""Residual Plot"""

residuals = Y -h_theta
plt.figure(figsize=(10, 6))
plt.scatter(Y_predicted, residuals)

"""# Loss vs Epoch Curve"""

plt.figure(figsize=(4, 4))

plt.plot(range(max_iterations), Loss)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Loss vs Epoch Curve')

plt.xlim(0,50)
plt.ylim(0,400)
plt.show()

"""# Results for [Hours of study = 7, Previous score = 95, Extracurricular Activities =Yes, Duration of Sleep = 7, Sample Question Papers Practiced = 6]"""

X_input=np.array([7,95,0,1,7,6])
Prediction=np.dot(X_input, theta_j)+theta_not

#required predicted value
Prediction

"""# modelâ€™s performance on the test set

MSE
"""

X1=Attributes_test[['Hours Studied','Previous Scores','Extracurricular Activities_No','Extracurricular Activities_Yes','Duration of Sleep','Sample Question Papers Practiced']].values
Y1=Target_test.values

TestY_prediction=np.dot(X1, theta_i[1:])+theta_not

TestY_prediction

#MSE
Error_MSE=np.mean((TestY_prediction -Y1)**2)

Error_MSE

"""R^2= 1- sum of squared regression/ total sum of squares"""

Squared_regression=np.sum((Y1-TestY_prediction)**2)

mean_Y1=np.mean(Y1)
sum_ofsquares= np.sum((Y1-mean_Y1)**2)

R_squared=1-(Squared_regression/sum_ofsquares)

R_squared

